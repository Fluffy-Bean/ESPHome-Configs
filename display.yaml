esphome:
  name: display
  friendly_name: Display
  comment: Display to show HA stats
  includes:
    - includes/text.hpp

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

api:

ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none

  ap:
    ssid: "Display Fallback Hotspot"
    password: "ChangeMe!"

  manual_ip:
    static_ip: 192.168.0.198
    gateway: 192.168.0.1
    subnet: 255.255.255.0

captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/London

sensor:
  # CO2
  - platform: homeassistant
    id: co2_sensor
    entity_id: sensor.pico_scd41_scd41_co2
    internal: true
  - platform: homeassistant
    id: co2_max_sensor
    entity_id: sensor.pico_scd41_max_co2
    internal: true
  - platform: homeassistant
    id: co2_min_sensor
    entity_id: sensor.pico_scd41_min_co2
    internal: true
  # Humidity
  - platform: homeassistant
    id: humidity_sensor
    entity_id: sensor.pico_scd41_scd41_humidity
    internal: true
  - platform: homeassistant
    id: humidity_max_sensor
    entity_id: sensor.pico_scd41_max_humidity
    internal: true
  - platform: homeassistant
    id: humidity_min_sensor
    entity_id: sensor.pico_scd41_min_humidity
    internal: true
  # Temperature
  - platform: homeassistant
    id: temperature_sensor
    entity_id: sensor.pico_scd41_scd41_temperature
    internal: true
  - platform: homeassistant
    id: temperature_max_sensor
    entity_id: sensor.pico_scd41_max_temperature
    internal: true
  - platform: homeassistant
    id: temperature_min_sensor
    entity_id: sensor.pico_scd41_min_temperature
    internal: true

binary_sensor:
  - platform: gpio
    id: push_button
    pin:
      number: 18
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_press:
      then:
        - display.page.show_next: display_gwagwa

i2c:
  sda: 21
  scl: 22

font:
  - file:
      type: local
      path: fonts/DS-DIGI-MONO.ttf
    id: font_digi
    size: 48
    glyphs: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890:"
  - file:
      type: gfonts
      family: "Ubuntu Mono"
    id: font_gwagwa
    size: 11
    glyphs: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890[]-_.:/|%°"
  - file:
      type: gfonts
      family: "Ubuntu Mono"
    id: font_gwagwa_smol
    size: 9
    glyphs: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890[]-_.:/|%°"

graph:
  - id: co2_graph
    duration: 30min
    x_grid: 5min
    width: 128
    height: 50
    traces:
      - sensor: co2_sensor
        line_type: SOLID
        continuous: true
        line_thickness: 1
  - id: humidity_graph
    duration: 30min
    x_grid: 5min
    width: 128
    height: 50
    traces:
      - sensor: humidity_sensor
        line_type: SOLID
        continuous: true
        line_thickness: 1
  - id: temperature_graph
    duration: 30min
    x_grid: 5min
    width: 128
    height: 50
    traces:
      - sensor: temperature_sensor
        line_type: SOLID
        continuous: true
        line_thickness: 1

display:
  - platform: ssd1306_i2c
    id: display_gwagwa
    model: "SSD1306 128x64"
    address: 0x3C
    pages:
      - id: page_clock
        lambda: |-
          if (!wifi::global_wifi_component->is_connected()) {
          it.print(it.get_width()/2, it.get_height()/2, id(font_gwagwa), TextAlign::CENTER, "offline");
          } else {
          it.strftime(it.get_width()/2, it.get_height()/2, id(font_digi), TextAlign::CENTER, "%H:%M", id(homeassistant_time).now());
          it.strftime(it.get_width()/2, (it.get_height()/2)+20, id(font_gwagwa), TextAlign::TOP_CENTER, "%Y %B %e", id(homeassistant_time).now());
          }
      - id: page_co2
        lambda: |-
          int calculated_width;

          if (!wifi::global_wifi_component->is_connected()) {
          calculated_width = GetTextWidth(&it, id(font_gwagwa), "%s", "offline");
          it.filled_rectangle(128-calculated_width-1, 0, calculated_width+1, 14, COLOR_ON);
          it.print(128, 0, id(font_gwagwa), COLOR_OFF, TextAlign::TOP_RIGHT, "offline");
          } else {
          calculated_width = GetTextWidth(&it, id(font_gwagwa), "%H:%M", id(homeassistant_time).now());
          it.filled_rectangle(128-calculated_width-1, 0, calculated_width+1, 14, COLOR_ON);
          it.strftime(128, 0, id(font_gwagwa), COLOR_OFF, TextAlign::TOP_RIGHT, "%H:%M", id(homeassistant_time).now());
          }

          it.printf(0, 0, id(font_gwagwa), "CO2 %.1fppm", id(co2_sensor).state);

          it.graph(0, 14, id(co2_graph));

          calculated_width = GetTextWidth(&it, id(font_gwagwa_smol), "%.1fppm", id(co2_max_sensor).state);
          it.filled_rectangle(0, 14, calculated_width+1, 9, COLOR_OFF);
          it.printf(0, 13, id(font_gwagwa_smol), "%.1fppm", id(co2_max_sensor).state);

          calculated_width = GetTextWidth(&it, id(font_gwagwa_smol), "%.1fppm", id(co2_min_sensor).state);
          it.filled_rectangle(0, 55, calculated_width+1, 9, COLOR_OFF);
          it.printf(0, 55, id(font_gwagwa_smol), "%.1fppm", id(co2_min_sensor).state);
      - id: page_humidity
        lambda: |-
          int calculated_width;

          if (!wifi::global_wifi_component->is_connected()) {
          calculated_width = GetTextWidth(&it, id(font_gwagwa), "%s", "offline");
          it.filled_rectangle(128-calculated_width-1, 0, calculated_width+1, 14, COLOR_ON);
          it.print(128, 0, id(font_gwagwa), COLOR_OFF, TextAlign::TOP_RIGHT, "offline");
          } else {
          calculated_width = GetTextWidth(&it, id(font_gwagwa), "%H:%M", id(homeassistant_time).now());
          it.filled_rectangle(128-calculated_width-1, 0, calculated_width+1, 14, COLOR_ON);
          it.strftime(128, 0, id(font_gwagwa), COLOR_OFF, TextAlign::TOP_RIGHT, "%H:%M", id(homeassistant_time).now());
          }

          it.printf(0, 0, id(font_gwagwa), "Humi %.1f%%", id(humidity_sensor).state);

          it.graph(0, 14, id(humidity_graph));

          calculated_width = GetTextWidth(&it, id(font_gwagwa_smol), "%.1f%%", id(humidity_max_sensor).state);
          it.filled_rectangle(0, 14, calculated_width+1, 9, COLOR_OFF);
          it.printf(0, 13, id(font_gwagwa_smol), "%.1f%%", id(humidity_max_sensor).state);

          calculated_width = GetTextWidth(&it, id(font_gwagwa_smol), "%.1f%%", id(humidity_min_sensor).state);
          it.filled_rectangle(0, 55, calculated_width+1, 9, COLOR_OFF);
          it.printf(0, 55, id(font_gwagwa_smol), "%.1f%%", id(humidity_min_sensor).state);
      - id: page_temperature
        lambda: |-
          int calculated_width;

          if (!wifi::global_wifi_component->is_connected()) {
          calculated_width = GetTextWidth(&it, id(font_gwagwa), "%s", "offline");
          it.filled_rectangle(128-calculated_width-1, 0, calculated_width+1, 14, COLOR_ON);
          it.print(128, 0, id(font_gwagwa), COLOR_OFF, TextAlign::TOP_RIGHT, "offline");
          } else {
          calculated_width = GetTextWidth(&it, id(font_gwagwa), "%H:%M", id(homeassistant_time).now());
          it.filled_rectangle(128-calculated_width-1, 0, calculated_width+1, 14, COLOR_ON);
          it.strftime(128, 0, id(font_gwagwa), COLOR_OFF, TextAlign::TOP_RIGHT, "%H:%M", id(homeassistant_time).now());
          }

          it.printf(0, 0, id(font_gwagwa), "Temp %.1f°C", id(temperature_sensor).state);

          it.graph(0, 14, id(temperature_graph));

          calculated_width = GetTextWidth(&it, id(font_gwagwa_smol), "%.1f°C", id(temperature_max_sensor).state);
          it.filled_rectangle(0, 14, calculated_width+1, 9, COLOR_OFF);
          it.printf(0, 13, id(font_gwagwa_smol), "%.1f°C", id(temperature_max_sensor).state);

          calculated_width = GetTextWidth(&it, id(font_gwagwa_smol), "%.1f°C", id(temperature_min_sensor).state);
          it.filled_rectangle(0, 55, calculated_width+1, 9, COLOR_OFF);
          it.printf(0, 55, id(font_gwagwa_smol), "%.1f°C", id(temperature_min_sensor).state);
